/*
4 kyu
Validate Sudoku with size `NxN`
Given a Sudoku data structure with size NxN, N > 0 and √N == integer, write a method to validate if it has been filled out correctly.

The data structure is a multi-dimensional Array, i.e:

[
  [7,8,4,  1,5,9,  3,2,6],
  [5,3,9,  6,7,2,  8,4,1],
  [6,1,2,  4,3,8,  7,5,9],
  
  [9,2,8,  7,1,5,  4,6,3],
  [3,5,7,  8,4,6,  1,9,2],
  [4,6,1,  9,2,3,  5,8,7],
  
  [8,7,6,  3,9,4,  2,1,5],
  [2,4,3,  5,6,1,  9,7,8],
  [1,9,5,  2,8,7,  6,3,4]
]

Rules for validation

    Data structure dimension: NxN where N > 0 and √N == integer
    Rows may only contain integers: 1..N (N included)
    Columns may only contain integers: 1..N (N included)
    'Little squares' (3x3 in example above) may also only contain integers: 1..N (N included)


*/

var Sudoku = function(data) 
{
  function nestTest(array=data)
{
  let test1, test2
  test1 = array.every(arr => arr.every(num => 
    typeof num === 'number'
    &&num>0&&num<=data.length
    &&arr.indexOf(num) === arr.lastIndexOf(num)))
  test2 = array.every(arr => arr.length === data.length)
  return test1 && test2
}

function vertifier()
{
  let newArr = []
  for(let i = 0;i < data.length;++i)
  {
    let slice = []
    data.forEach(arr => slice.push(arr[i]))
    newArr.push(slice.slice())
  }
  return newArr.slice()
}

function subifier()
{
  let sub = Math.sqrt(data.length)
  let newArr = []

  for(let orow = 0; orow < data.length;orow += sub)
  {
    for(let ocol = 0;ocol < data.length;ocol += sub)
    {
      let slice = []
      for(let row = 0;row < sub;++row)
      {
        slice.push(...data[orow+row].slice(ocol, ocol+sub))
      }
      newArr.push(slice.slice())
    }
  }
  return newArr.slice()
}
  return {
    isValid: function() {
      let test = nestTest()
      if(test != true) return false
      test = nestTest(vertifier())
      if(test != true) return false
      test = nestTest(subifier())
      return test
    }
  };
};